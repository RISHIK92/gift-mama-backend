generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  firstName             String
  lastName              String?
  email                 String        @unique
  phone                 String?
  city                  String?
  password              String
  id                    Int           @id @default(autoincrement())
  address1              String?
  address2              String?
  country               String?
  image                 String?
  pinCode               String?
  state                 String?
  usePrimaryForWhatsApp Boolean       @default(false)
  whatsappNumber        String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @default(now()) @updatedAt
  cart                  Cart?
  orders                Order[]
  wallet                Wallet?
  walletOrders          WalletOrder[]
  address               Address[]
  couponUsage           CouponUsage[]
  customUploads         CustomUpload[]
  wishlist              Wishlist?
}

model Admin {
  email     String   @unique
  password  String
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Product {
  id                     Int                     @id @default(autoincrement())
  name                   String                  @unique
  price                  Decimal
  discount               Decimal?
  discountedPrice        Decimal?
  description            String?
  categories             String[]
  subCategories          String[]
  occasion               String[]
  recipients             String[]
  isCustomizable         Boolean                 @default(false)
  customizationOptions   Json?                   // Store customization options as JSON
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now()) @updatedAt
  deliveryFee            Decimal?                @default(0)
  stock                  Int?
  youtubeLink            String?

  cartItems              CartItem[]
  wishlistItems          WishlistItem[]
  orderItems             OrderItem[]
  images                 ProductImage[]
  customUploads          CustomUpload[]
  masks                  Mask[]
  productMasks           ProductMask[]
  customizationTemplates CustomizationTemplate[]
  flashSaleItems         FlashSaleItem[]
}

model CustomizationTemplate {
  id               Int       @id @default(autoincrement())
  product          Product   @relation(fields: [productId], references: [id])
  productId        Int
  name             String
  svgData          String?   // Optional SVG template data (overlay)
  thumbnailUrl     String?   // Thumbnail for template selection
  isActive         Boolean   @default(true)
  orderIndex       Int       @default(0)
  customizableAreas CustomizableArea[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  CustomUpload     CustomUpload[]
}

model CustomizableArea {
  id               Int       @id @default(autoincrement())
  template         CustomizationTemplate @relation(fields: [templateId], references: [id])
  templateId       Int
  name             String?
  description      String?   // Add description field
  shape            String    // 'rectangle', 'circle', 'triangle', 'hexagon'
  centerX          Float     // X coordinate of center
  centerY          Float     // Y coordinate of center
  width            Float?    // For rectangle/triangle
  height           Float?    // For rectangle/triangle
  radius           Float?    // For circle/hexagon
  defaultScale     Float     @default(1.0)
  defaultRotation  Float     @default(0.0)
  defaultPositionX Float     @default(0.0)
  defaultPositionY Float     @default(0.0)
  orderIndex       Int       @default(0)
  allowedFormats   String[]  @default(["image/jpeg", "image/png"]) // Add allowed formats
  maxFileSizeMB    Float     @default(5.0)  // Max file size in MB
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  CustomUpload     CustomUpload[]
}

model Category {
  id          Int      @id @default(autoincrement())
  subCategory String[]
  category    String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Categories {
  id            Int      @id @default(autoincrement())
  categories    String   @unique
  subCategories String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model Occasions {
  id         Int      @id @default(autoincrement())
  occasions  String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model Recipients {
  id         Int      @id @default(autoincrement())
  recipients String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model NavCategory {
  id          Int      @id @default(autoincrement())
  navCategory String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model AllCategories {
  id         Int      @id @default(autoincrement())
  categories String[] @unique
  occasions  String[]
  recipients String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model ProductImage {
  mainImage    String
  subImages    String[]
  displayImage String
  id           Int      @id @default(autoincrement())
  productId    Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model HomeImages {
  id                   Int             @id @default(autoincrement())
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @default(now()) @updatedAt
  advertImages         String[]
  flashSaleDescription String          @default("Hurry Up! Flash Sale")
  flashSaleEnabled     Boolean         @default(true)
  heroImages           String[]
  heroSubtitles        String[]
  heroTitles           String[]
  customSections       CustomSection[]
}

model CustomSection {
  id           Int        @id @default(autoincrement())
  homeImagesId Int
  category     String
  title        String
  enabled      Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  homeImages   HomeImages @relation(fields: [homeImagesId], references: [id], onDelete: Cascade)
}

model Occasion {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  occasionImages String[]
  occasionName   String[]
}

model FlashSale {
  id          Int             @id @default(autoincrement())
  title       String
  startTime   DateTime
  endTime     DateTime
  active      Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt
  description String
  items       FlashSaleItem[]
}

model FlashSaleItem {
  id          Int       @id @default(autoincrement())
  flashSaleId Int
  productId   Int
  salePrice   Decimal
  discount    Decimal
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  flashSale   FlashSale @relation(fields: [flashSaleId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([flashSaleId, productId])
}

model Cart {
  id                    Int        @id @default(autoincrement())
  userId                Int        @unique
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @default(now()) @updatedAt
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items                 CartItem[]
  appliedCouponId       Int?
  appliedCoupon         Coupon?    @relation(fields: [appliedCouponId], references: [id])
  couponDiscountAmount  Decimal?   @default(0)
  couponDiscountType    String?
  couponDiscountValue   Decimal?
  deliveryFee           Decimal?   @default(0)
  discountAmount        Decimal?   @default(0)

  @@index([userId])
}

model CartItem {
  id                    Int       @id @default(autoincrement())
  cartId                Int
  productId             Int 
  quantity              Int       @default(1)
  flashSalePrice        Decimal?
  customizationDetails  Json?     // Will store array of customization data
  customizationImageUrls String[] // Storing all uploaded image URLs
  customTemplateId      Int?      // ID of the selected customization template
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now()) @updatedAt
  
  // Relations
  cart                  Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product               Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([cartId, productId])
}

model Wishlist {
  id        Int            @id @default(autoincrement())
  userId    Int            @unique
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  items     WishlistItem[]
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlistId Int
  productId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
}

model Order {
  id                    Int             @id @default(autoincrement())
  userId                Int
  razorpayOrderId       String          @unique
  razorpayPaymentId     String?
  razorpaySignature     String?
  amount                Decimal
  status                String          @default("INITIATED")
  delivery              String          @default("Ordered")
  currency              String
  useWallet             Boolean         @default(false)
  walletAmount          Decimal         @default(0)
  customizationDetails  String?         // Add this field to store JSON stringified customization data
  createdAt             DateTime        @default(now())
  user                  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems            OrderItem[]
  shippingAddress       ShippingAddress?
  notes                 String?
  appliedCouponId       Int?
  couponDiscountAmount  Decimal?        @default(0)
  deliveryFee           Decimal         @default(0)
  couponId              Int?
  coupon                Coupon?         @relation(fields: [couponId], references: [id])
  couponUsage           CouponUsage[]
}

model Address {
  id         Int      @id @default(autoincrement())
  userId     Int
  name       String
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShippingAddress {
  id         Int     @id @default(autoincrement())
  orderId    Int     @unique
  name       String?
  line1      String?
  line2      String?
  city       String?
  state      String?
  postalCode String?
  country    String?
  phone      String?
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id                    Int     @id @default(autoincrement())
  orderId               Int
  productId             Int
  quantity              Int
  price                 Decimal
  customizationImageUrl String[]
  customizationDetails  String? // This will store JSON stringified customization data
  customTemplateId      Int?    // ID of the customization template used
  order                 Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product               Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Wallet {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance      Decimal       @default(0)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model WalletOrder {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  razorpayOrderId   String   @unique
  razorpayPaymentId String?
  razorpaySignature String?
  amount            Decimal
  status            String   @default("INITIATED")
  currency          String   @default("INR")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Transaction {
  id                Int      @id @default(autoincrement())
  walletId          Int
  wallet            Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  amount            Decimal
  type              String
  description       String
  razorpayPaymentId String?
  createdAt         DateTime @default(now())
}

model Coupon {
  id                   Int          @id @default(autoincrement())
  code                 String       @unique
  description          String?
  discountType         DiscountType // PERCENTAGE or FIXED
  discountValue        Decimal
  minPurchaseAmount    Decimal?
  maxDiscountAmount    Decimal?
  startDate            DateTime
  endDate              DateTime
  isActive             Boolean      @default(true)
  usageLimit           Int?
  usageCount           Int          @default(0)
  perUserLimit         Int?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @default(now()) @updatedAt
  applicableUserIds    Int[]
  applicableProductIds Int[]
  applicableCategories String[]
  applicableOccasions  String[]
  applicableRecipients String[]
  usages               CouponUsage[]
  orders               Order[]
  carts                Cart[]
}

model CouponUsage {
  id        Int      @id @default(autoincrement())
  couponId  Int
  userId    Int
  orderId   Int?
  usedAt    DateTime @default(now())
  coupon    Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([couponId, orderId])
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model Mask {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  maskImageUrl String        // URL to the transparent PNG mask
  width        Int           // Width of the mask area
  height       Int           // Height of the mask area
  productId    Int
  product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  productMasks ProductMask[]
}

model ProductMask {
  id          Int      @id @default(autoincrement())
  productId   Int
  maskId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  mask        Mask     @relation(fields: [maskId], references: [id], onDelete: Cascade)

  @@unique([productId, maskId])
}

model CustomUpload {
  id               Int       @id @default(autoincrement())
  product          Product   @relation(fields: [productId], references: [id])
  productId        Int
  user             User      @relation(fields: [userId], references: [id])
  userId           Int
  template         CustomizationTemplate @relation(fields: [templateId], references: [id])
  templateId       Int
  area             CustomizableArea? @relation(fields: [areaId], references: [id])
  areaId           Int?
  imageUrl         String    // URL to processed image
  originalImageUrl String?    // URL to original image
  width            Int?
  height           Int?
  scale            Float?     @default(1.0)
  rotation         Float?     @default(0.0)
  positionX        Float?     @default(0.0) 
  positionY        Float?     @default(0.0)
  shape            String?    // Shape used for this upload
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Testimonial {
  id          Int      @id @default(autoincrement())
  name        String
  content     String
  rating      Int      @default(5)
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
}